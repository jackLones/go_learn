// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             v3.15.5
// source: hello.proto

package sayService

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	SayService_SayHello_FullMethodName = "/sayService/SayHello"
)

// SayServiceClient is the client API for SayService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SayServiceClient interface {
	SayHello(ctx context.Context, in *HelloRequest, opts ...grpc.CallOption) (*HelloRes, error)
}

type sayServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSayServiceClient(cc grpc.ClientConnInterface) SayServiceClient {
	return &sayServiceClient{cc}
}

func (c *sayServiceClient) SayHello(ctx context.Context, in *HelloRequest, opts ...grpc.CallOption) (*HelloRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(HelloRes)
	err := c.cc.Invoke(ctx, SayService_SayHello_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SayServiceServer is the server API for SayService service.
// All implementations must embed UnimplementedSayServiceServer
// for forward compatibility
type SayServiceServer interface {
	SayHello(context.Context, *HelloRequest) (*HelloRes, error)
	mustEmbedUnimplementedSayServiceServer()
}

// UnimplementedSayServiceServer must be embedded to have forward compatible implementations.
type UnimplementedSayServiceServer struct {
}

func (UnimplementedSayServiceServer) SayHello(context.Context, *HelloRequest) (*HelloRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SayHello not implemented")
}
func (UnimplementedSayServiceServer) mustEmbedUnimplementedSayServiceServer() {}

// UnsafeSayServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SayServiceServer will
// result in compilation errors.
type UnsafeSayServiceServer interface {
	mustEmbedUnimplementedSayServiceServer()
}

func RegisterSayServiceServer(s grpc.ServiceRegistrar, srv SayServiceServer) {
	s.RegisterService(&SayService_ServiceDesc, srv)
}

func _SayService_SayHello_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HelloRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SayServiceServer).SayHello(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SayService_SayHello_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SayServiceServer).SayHello(ctx, req.(*HelloRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// SayService_ServiceDesc is the grpc.ServiceDesc for SayService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SayService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "sayService",
	HandlerType: (*SayServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SayHello",
			Handler:    _SayService_SayHello_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "hello.proto",
}

const (
	SayService1_SayHello1_FullMethodName = "/sayService1/SayHello1"
)

// SayService1Client is the client API for SayService1 service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SayService1Client interface {
	SayHello1(ctx context.Context, in *HelloRequest, opts ...grpc.CallOption) (*HelloRes, error)
}

type sayService1Client struct {
	cc grpc.ClientConnInterface
}

func NewSayService1Client(cc grpc.ClientConnInterface) SayService1Client {
	return &sayService1Client{cc}
}

func (c *sayService1Client) SayHello1(ctx context.Context, in *HelloRequest, opts ...grpc.CallOption) (*HelloRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(HelloRes)
	err := c.cc.Invoke(ctx, SayService1_SayHello1_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SayService1Server is the server API for SayService1 service.
// All implementations must embed UnimplementedSayService1Server
// for forward compatibility
type SayService1Server interface {
	SayHello1(context.Context, *HelloRequest) (*HelloRes, error)
	mustEmbedUnimplementedSayService1Server()
}

// UnimplementedSayService1Server must be embedded to have forward compatible implementations.
type UnimplementedSayService1Server struct {
}

func (UnimplementedSayService1Server) SayHello1(context.Context, *HelloRequest) (*HelloRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SayHello1 not implemented")
}
func (UnimplementedSayService1Server) mustEmbedUnimplementedSayService1Server() {}

// UnsafeSayService1Server may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SayService1Server will
// result in compilation errors.
type UnsafeSayService1Server interface {
	mustEmbedUnimplementedSayService1Server()
}

func RegisterSayService1Server(s grpc.ServiceRegistrar, srv SayService1Server) {
	s.RegisterService(&SayService1_ServiceDesc, srv)
}

func _SayService1_SayHello1_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HelloRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SayService1Server).SayHello1(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SayService1_SayHello1_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SayService1Server).SayHello1(ctx, req.(*HelloRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// SayService1_ServiceDesc is the grpc.ServiceDesc for SayService1 service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SayService1_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "sayService1",
	HandlerType: (*SayService1Server)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SayHello1",
			Handler:    _SayService1_SayHello1_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "hello.proto",
}
